- name: Check if Xcode is installed
  command: mdfind -onlyin /Applications "kMDItemCFBundleIdentifier == 'com.apple.dt.Xcode'"
  register: xcode_app
  changed_when: false
  check_mode: no

- name: Register xcode_installed
  set_fact:
    xcode_installed: "{{ xcode_app.stdout.find('Xcode') != -1 }}"

- name: Get Installed Xcode version
  shell: xcodebuild -version | head -n1 | cut -d " " -f 2
  register: xcode_app_output
  when: xcode_installed
  changed_when: false
  check_mode: no

- name: Export Installed Xcode version
  set_fact:
    xcode_installed_version: "{{ xcode_app_output.stdout }}"
  when: xcode_installed

- name: Get Candidate Xcode version
  shell: echo -n "{{ xcode_xip_location }}" | cut -d "_" -f 2 | sed s/'.xip'//g
  register: xcode_path_parse
  changed_when: false
  check_mode: no

- name: Export Candidate Xcode version
  set_fact:
    xcode_target_version: "{{ xcode_path_parse.stdout }}"

- name: Install Xcode
  block:
    - name: check that the xcode archive is valid
      command: >
        pkgutil --check-signature {{ xcode_xip_location }} |
        grep \"Status: signed Apple Software\"

    - name: Create temporary diretory of Xcode instalattion
      file:
        path: "/Applications/Xcode.app.{{ xcode_full_version }}"
        state: directory

    - name: Install Xcode from XIP file Location to temporary diretory
      command: xip --expand {{ xcode_xip_location }}
      args:
        chdir: "/Applications/Xcode.app.{{ xcode_full_version }}"
      poll: 5
      async: "{{ xcode_xip_extraction_timeout }}" # Prevent SSH connections timing out waiting for extraction

    - name: Move old xcode to tarsh
      command: mv /Applications/Xcode.app /Applications/Xcode.app.trash
      args:
        chdir: /Applications

    - name: "Move xcode {{ xcode_full_version }} to /Applications directory"
      command: "mv /Applications/Xcode.app.{{ xcode_full_version }}/Xcode.app /Applications/"
      args:
        chdir: /Applications

    - name: Accept License Agreement
      command: "{{ xcode_build }} -license accept"
      become: true

    - name: Run Xcode first launch
      command: "{{ xcode_build }} -runFirstLaunch"
      become: true

    - name: Clean up temporary diretory of Xcode installation
      file:
        path: "/Applications/Xcode.app.{{ xcode_full_version }}"
        state: absent

    - name: Clean up trash diretory of trash Xcode
      file:
        path: /Applications/Xcode.app.trash
        state: absent

  when: not xcode_installed or xcode_installed_version is version(xcode_target_version, '!=')

- name: Enable Developer Mode
  developer_mode:
    state: enable
  become: true

- name: Again check if Xcode is installed
  command: mdfind -onlyin /Applications "kMDItemCFBundleIdentifier == 'com.apple.dt.Xcode'"
  register: xcode_app_again
  changed_when: false
  check_mode: no

- name: Set Xcode command line tools path if Xcode is installed
  become: true
  shell: xcode-select -s "{{ xcode_app_again.stdout }}"
  changed_when: false
  check_mode: no

